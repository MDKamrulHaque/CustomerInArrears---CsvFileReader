@page "/customerdataimport"
@using CustomerInArrears.Shared
@inject HttpClient Http
@using CsvHelper;
@using System.Globalization;
@using System.Net.Http.Headers;

<InputFile OnChange="HandleFileSelected" />
<MudButton><a @onclick="ExportFilteredCsvFile" href="@exportUrl" download="@exportFileName">Export File</a></MudButton>
@if (customerDatas != null)
{
    <MudSimpleTable Hover="true" Dense="true" FixedHeader="@fixedheader" Style="@(fixedheader?"height:300px;":"")">
        <thead>
            <tr>
                <th>Tenancy Number</th>
                <th>Property Id</th>
                <th>Client Name</th>
                <th>Mobile Number</th>
                <th>Tenancy Balance</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customerData in customerDatas)
            {
                <tr>
                    <td>@customerData.TenancyNumber</td>
                    <td>@customerData.PropertyId</td>
                    <td>@customerData.ClientName</td>
                    @if (customerData.MobileNumber.Length != 11 || !customerData.MobileNumber.StartsWith("07"))
                    {
                        <td class="incorrectMobNum" style="background-color:orange;">@customerData.MobileNumber</td>
                    }
                    else
                    {
                        <td>@customerData.MobileNumber</td>
                    }

                   
                    @if(customerData.TenancyBalance < 0)
                    {
                        <td class="nagativeBalance" style="background-color:red;">@customerData.TenancyBalance</td>
                    }
                    else{
                        <td>@customerData.TenancyBalance</td>
                        
                        }
                   
                </tr>
            }
        </tbody>
    </MudSimpleTable>

    <div class="card">
        <div class="card-body">
            @{

                int incorrectMobileNumbers = 0;
                foreach (var customerData in customerDatas)
                {
                    if (customerData.MobileNumber.Length != 11 || !customerData.MobileNumber.StartsWith("07"))
                    {
                        incorrectMobileNumbers++;
                    }
                }

                <p>Number of records imported: @customerDatas.Count</p>
                <p>Number of incorrect mobile numbers: @incorrectMobileNumbers</p>
            }
        </div>
    </div>
    <MudSwitch @bind-Checked="@fixedheader">Fixed Header</MudSwitch>

}


@code {
    bool fixedheader = true;
    private List<CustomerData>? customerDatas;
    private string exportUrl;
    private string exportFileName;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var formData = new MultipartFormDataContent();
        formData.Add(new StreamContent(file.OpenReadStream()), "file", file.Name);

        var response = await Http.PostAsync("api/CsvFile/uploadcsvfile", formData);

        if (response.IsSuccessStatusCode)
        {
            customerDatas = await response.Content.ReadFromJsonAsync<List<CustomerData>>();
        }
    }

    private async Task ExportFilteredCsvFile()
    {
        var filteredData = customerDatas?.Where(cd => cd.TenancyBalance < 0 /*&& cd.MobileNumber.Length == 11 && cd.MobileNumber.StartsWith("07")*/);

        var memoryStream = new MemoryStream();
        var streamWriter = new StreamWriter(memoryStream);
        var csvWriter = new CsvWriter(streamWriter, CultureInfo.InvariantCulture);
             
        foreach (var customerData in filteredData)
        {
            await streamWriter.WriteLineAsync($"1, Hello {customerData.ClientName} - you are receiving this message as you are currently in arrears., MoblieNumber: {customerData.MobileNumber}, TenencyNumber: {customerData.TenancyNumber},{DateTime.Now:dd/MM/yyyy H:mm}");

        }        
        await streamWriter.FlushAsync();
        memoryStream.Seek(0, SeekOrigin.Begin);

        var content = new StreamContent(memoryStream);
        content.Headers.ContentType = new MediaTypeHeaderValue("text/csv");
        exportFileName = $"exportedCsv-{DateTime.Now.ToFileTime()}.csv";
        exportUrl = $"data:text/csv;charset=utf-8,{Uri.EscapeDataString(await content.ReadAsStringAsync())}";
    }

}
